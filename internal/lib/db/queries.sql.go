// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: queries.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const insertSongAndReturnId = `-- name: InsertSongAndReturnId :one
INSERT INTO
  song (title, artist, release_date, lyrics, link)
VALUES
  ($1, $2, $3, $4, $5)
RETURNING id
`

type InsertSongAndReturnIdParams struct {
	Title       string
	Artist      string
	ReleaseDate pgtype.Date
	Lyrics      []string
	Link        string
}

func (q *Queries) InsertSongAndReturnId(ctx context.Context, arg InsertSongAndReturnIdParams) (int64, error) {
	row := q.db.QueryRow(ctx, insertSongAndReturnId,
		arg.Title,
		arg.Artist,
		arg.ReleaseDate,
		arg.Lyrics,
		arg.Link,
	)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const listSongs = `-- name: ListSongs :many
SELECT id, title, artist, release_date, lyrics, link FROM song
ORDER BY id
`

func (q *Queries) ListSongs(ctx context.Context) ([]Song, error) {
	rows, err := q.db.Query(ctx, listSongs)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Song
	for rows.Next() {
		var i Song
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Artist,
			&i.ReleaseDate,
			&i.Lyrics,
			&i.Link,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
